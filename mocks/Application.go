// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	di "github.com/go-fork/di"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// Alias provides a mock function with given fields: abstract, alias
func (_m *Application) Alias(abstract string, alias string) {
	_m.Called(abstract, alias)
}

// Bind provides a mock function with given fields: abstract, concrete
func (_m *Application) Bind(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// Boot provides a mock function with no fields
func (_m *Application) Boot() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Boot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BootServiceProviders provides a mock function with no fields
func (_m *Application) BootServiceProviders() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BootServiceProviders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Call provides a mock function with given fields: callback, additionalParams
func (_m *Application) Call(callback interface{}, additionalParams ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, callback)
	_ca = append(_ca, additionalParams...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) ([]interface{}, error)); ok {
		return rf(callback, additionalParams...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) []interface{}); ok {
		r0 = rf(callback, additionalParams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(callback, additionalParams...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Container provides a mock function with no fields
func (_m *Application) Container() *di.Container {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Container")
	}

	var r0 *di.Container
	if rf, ok := ret.Get(0).(func() *di.Container); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*di.Container)
		}
	}

	return r0
}

// Instance provides a mock function with given fields: abstract, instance
func (_m *Application) Instance(abstract string, instance interface{}) {
	_m.Called(abstract, instance)
}

// Make provides a mock function with given fields: abstract
func (_m *Application) Make(abstract string) (interface{}, error) {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(abstract)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(abstract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustMake provides a mock function with given fields: abstract
func (_m *Application) MustMake(abstract string) interface{} {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for MustMake")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Register provides a mock function with given fields: provider
func (_m *Application) Register(provider di.ServiceProvider) {
	_m.Called(provider)
}

// RegisterServiceProviders provides a mock function with no fields
func (_m *Application) RegisterServiceProviders() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegisterServiceProviders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterWithDependencies provides a mock function with no fields
func (_m *Application) RegisterWithDependencies() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegisterWithDependencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Singleton provides a mock function with given fields: abstract, concrete
func (_m *Application) Singleton(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
