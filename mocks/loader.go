// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ModuleLoaderContract is an autogenerated mock type for the ModuleLoaderContract type
type ModuleLoaderContract struct {
	mock.Mock
}

// BootstrapApplication provides a mock function with no fields
func (_m *ModuleLoaderContract) BootstrapApplication() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BootstrapApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadModule provides a mock function with given fields: module
func (_m *ModuleLoaderContract) LoadModule(module interface{}) error {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for LoadModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadModules provides a mock function with given fields: modules
func (_m *ModuleLoaderContract) LoadModules(modules ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, modules...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoadModules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(modules...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterCoreProviders provides a mock function with no fields
func (_m *ModuleLoaderContract) RegisterCoreProviders() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegisterCoreProviders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModuleLoaderContract creates a new instance of ModuleLoaderContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleLoaderContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleLoaderContract {
	mock := &ModuleLoaderContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
