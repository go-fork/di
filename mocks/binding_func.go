// Code generated by mockery. DO NOT EDIT.

package di_mocks

import (
	mock "github.com/stretchr/testify/mock"
	di "go.fork.vn/di"
)

// MockBindingFunc is an autogenerated mock type for the BindingFunc type
type MockBindingFunc struct {
	mock.Mock
}

type MockBindingFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBindingFunc) EXPECT() *MockBindingFunc_Expecter {
	return &MockBindingFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockBindingFunc) Execute(c di.Container) interface{} {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(di.Container) interface{}); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockBindingFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBindingFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c di.Container
func (_e *MockBindingFunc_Expecter) Execute(c interface{}) *MockBindingFunc_Execute_Call {
	return &MockBindingFunc_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockBindingFunc_Execute_Call) Run(run func(c di.Container)) *MockBindingFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Container))
	})
	return _c
}

func (_c *MockBindingFunc_Execute_Call) Return(_a0 interface{}) *MockBindingFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBindingFunc_Execute_Call) RunAndReturn(run func(di.Container) interface{}) *MockBindingFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBindingFunc creates a new instance of MockBindingFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBindingFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBindingFunc {
	mock := &MockBindingFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
