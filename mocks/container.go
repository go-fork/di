// Code generated by mockery. DO NOT EDIT.

package di_mocks

import (
	mock "github.com/stretchr/testify/mock"
	di "go.fork.vn/di"
)

// MockContainer is an autogenerated mock type for the Container type
type MockContainer struct {
	mock.Mock
}

type MockContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainer) EXPECT() *MockContainer_Expecter {
	return &MockContainer_Expecter{mock: &_m.Mock}
}

// Alias provides a mock function with given fields: abstract, alias
func (_m *MockContainer) Alias(abstract string, alias string) {
	_m.Called(abstract, alias)
}

// MockContainer_Alias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alias'
type MockContainer_Alias_Call struct {
	*mock.Call
}

// Alias is a helper method to define mock.On call
//   - abstract string
//   - alias string
func (_e *MockContainer_Expecter) Alias(abstract interface{}, alias interface{}) *MockContainer_Alias_Call {
	return &MockContainer_Alias_Call{Call: _e.mock.On("Alias", abstract, alias)}
}

func (_c *MockContainer_Alias_Call) Run(run func(abstract string, alias string)) *MockContainer_Alias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContainer_Alias_Call) Return() *MockContainer_Alias_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_Alias_Call) RunAndReturn(run func(string, string)) *MockContainer_Alias_Call {
	_c.Run(run)
	return _c
}

// Bind provides a mock function with given fields: abstract, concrete
func (_m *MockContainer) Bind(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// MockContainer_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockContainer_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - abstract string
//   - concrete di.BindingFunc
func (_e *MockContainer_Expecter) Bind(abstract interface{}, concrete interface{}) *MockContainer_Bind_Call {
	return &MockContainer_Bind_Call{Call: _e.mock.On("Bind", abstract, concrete)}
}

func (_c *MockContainer_Bind_Call) Run(run func(abstract string, concrete di.BindingFunc)) *MockContainer_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(di.BindingFunc))
	})
	return _c
}

func (_c *MockContainer_Bind_Call) Return() *MockContainer_Bind_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_Bind_Call) RunAndReturn(run func(string, di.BindingFunc)) *MockContainer_Bind_Call {
	_c.Run(run)
	return _c
}

// BindIf provides a mock function with given fields: abstract, concrete
func (_m *MockContainer) BindIf(abstract string, concrete di.BindingFunc) bool {
	ret := _m.Called(abstract, concrete)

	if len(ret) == 0 {
		panic("no return value specified for BindIf")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, di.BindingFunc) bool); ok {
		r0 = rf(abstract, concrete)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_BindIf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindIf'
type MockContainer_BindIf_Call struct {
	*mock.Call
}

// BindIf is a helper method to define mock.On call
//   - abstract string
//   - concrete di.BindingFunc
func (_e *MockContainer_Expecter) BindIf(abstract interface{}, concrete interface{}) *MockContainer_BindIf_Call {
	return &MockContainer_BindIf_Call{Call: _e.mock.On("BindIf", abstract, concrete)}
}

func (_c *MockContainer_BindIf_Call) Run(run func(abstract string, concrete di.BindingFunc)) *MockContainer_BindIf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(di.BindingFunc))
	})
	return _c
}

func (_c *MockContainer_BindIf_Call) Return(_a0 bool) *MockContainer_BindIf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_BindIf_Call) RunAndReturn(run func(string, di.BindingFunc) bool) *MockContainer_BindIf_Call {
	_c.Call.Return(run)
	return _c
}

// Bound provides a mock function with given fields: abstract
func (_m *MockContainer) Bound(abstract string) bool {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for Bound")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(abstract)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContainer_Bound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bound'
type MockContainer_Bound_Call struct {
	*mock.Call
}

// Bound is a helper method to define mock.On call
//   - abstract string
func (_e *MockContainer_Expecter) Bound(abstract interface{}) *MockContainer_Bound_Call {
	return &MockContainer_Bound_Call{Call: _e.mock.On("Bound", abstract)}
}

func (_c *MockContainer_Bound_Call) Run(run func(abstract string)) *MockContainer_Bound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContainer_Bound_Call) Return(_a0 bool) *MockContainer_Bound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_Bound_Call) RunAndReturn(run func(string) bool) *MockContainer_Bound_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function with given fields: callback, additionalParams
func (_m *MockContainer) Call(callback interface{}, additionalParams ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, callback)
	_ca = append(_ca, additionalParams...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) ([]interface{}, error)); ok {
		return rf(callback, additionalParams...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) []interface{}); ok {
		r0 = rf(callback, additionalParams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(callback, additionalParams...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainer_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockContainer_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - callback interface{}
//   - additionalParams ...interface{}
func (_e *MockContainer_Expecter) Call(callback interface{}, additionalParams ...interface{}) *MockContainer_Call_Call {
	return &MockContainer_Call_Call{Call: _e.mock.On("Call",
		append([]interface{}{callback}, additionalParams...)...)}
}

func (_c *MockContainer_Call_Call) Run(run func(callback interface{}, additionalParams ...interface{})) *MockContainer_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockContainer_Call_Call) Return(_a0 []interface{}, _a1 error) *MockContainer_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainer_Call_Call) RunAndReturn(run func(interface{}, ...interface{}) ([]interface{}, error)) *MockContainer_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Instance provides a mock function with given fields: abstract, instance
func (_m *MockContainer) Instance(abstract string, instance interface{}) {
	_m.Called(abstract, instance)
}

// MockContainer_Instance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instance'
type MockContainer_Instance_Call struct {
	*mock.Call
}

// Instance is a helper method to define mock.On call
//   - abstract string
//   - instance interface{}
func (_e *MockContainer_Expecter) Instance(abstract interface{}, instance interface{}) *MockContainer_Instance_Call {
	return &MockContainer_Instance_Call{Call: _e.mock.On("Instance", abstract, instance)}
}

func (_c *MockContainer_Instance_Call) Run(run func(abstract string, instance interface{})) *MockContainer_Instance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockContainer_Instance_Call) Return() *MockContainer_Instance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_Instance_Call) RunAndReturn(run func(string, interface{})) *MockContainer_Instance_Call {
	_c.Run(run)
	return _c
}

// Make provides a mock function with given fields: abstract
func (_m *MockContainer) Make(abstract string) (interface{}, error) {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(abstract)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(abstract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContainer_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockContainer_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - abstract string
func (_e *MockContainer_Expecter) Make(abstract interface{}) *MockContainer_Make_Call {
	return &MockContainer_Make_Call{Call: _e.mock.On("Make", abstract)}
}

func (_c *MockContainer_Make_Call) Run(run func(abstract string)) *MockContainer_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContainer_Make_Call) Return(_a0 interface{}, _a1 error) *MockContainer_Make_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContainer_Make_Call) RunAndReturn(run func(string) (interface{}, error)) *MockContainer_Make_Call {
	_c.Call.Return(run)
	return _c
}

// MustMake provides a mock function with given fields: abstract
func (_m *MockContainer) MustMake(abstract string) interface{} {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for MustMake")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockContainer_MustMake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustMake'
type MockContainer_MustMake_Call struct {
	*mock.Call
}

// MustMake is a helper method to define mock.On call
//   - abstract string
func (_e *MockContainer_Expecter) MustMake(abstract interface{}) *MockContainer_MustMake_Call {
	return &MockContainer_MustMake_Call{Call: _e.mock.On("MustMake", abstract)}
}

func (_c *MockContainer_MustMake_Call) Run(run func(abstract string)) *MockContainer_MustMake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContainer_MustMake_Call) Return(_a0 interface{}) *MockContainer_MustMake_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContainer_MustMake_Call) RunAndReturn(run func(string) interface{}) *MockContainer_MustMake_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockContainer) Reset() {
	_m.Called()
}

// MockContainer_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockContainer_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockContainer_Expecter) Reset() *MockContainer_Reset_Call {
	return &MockContainer_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockContainer_Reset_Call) Run(run func()) *MockContainer_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_Reset_Call) Return() *MockContainer_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_Reset_Call) RunAndReturn(run func()) *MockContainer_Reset_Call {
	_c.Run(run)
	return _c
}

// Singleton provides a mock function with given fields: abstract, concrete
func (_m *MockContainer) Singleton(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// MockContainer_Singleton_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Singleton'
type MockContainer_Singleton_Call struct {
	*mock.Call
}

// Singleton is a helper method to define mock.On call
//   - abstract string
//   - concrete di.BindingFunc
func (_e *MockContainer_Expecter) Singleton(abstract interface{}, concrete interface{}) *MockContainer_Singleton_Call {
	return &MockContainer_Singleton_Call{Call: _e.mock.On("Singleton", abstract, concrete)}
}

func (_c *MockContainer_Singleton_Call) Run(run func(abstract string, concrete di.BindingFunc)) *MockContainer_Singleton_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(di.BindingFunc))
	})
	return _c
}

func (_c *MockContainer_Singleton_Call) Return() *MockContainer_Singleton_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_Singleton_Call) RunAndReturn(run func(string, di.BindingFunc)) *MockContainer_Singleton_Call {
	_c.Run(run)
	return _c
}

// NewMockContainer creates a new instance of MockContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainer {
	mock := &MockContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
