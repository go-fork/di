// Code generated by mockery. DO NOT EDIT.

package di_mocks

import (
	mock "github.com/stretchr/testify/mock"
	di "go.fork.vn/di"
)

// MockServiceProviderDeferred is an autogenerated mock type for the ServiceProviderDeferred type
type MockServiceProviderDeferred struct {
	mock.Mock
}

type MockServiceProviderDeferred_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceProviderDeferred) EXPECT() *MockServiceProviderDeferred_Expecter {
	return &MockServiceProviderDeferred_Expecter{mock: &_m.Mock}
}

// Boot provides a mock function with given fields: app
func (_m *MockServiceProviderDeferred) Boot(app di.Application) {
	_m.Called(app)
}

// MockServiceProviderDeferred_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type MockServiceProviderDeferred_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
//   - app di.Application
func (_e *MockServiceProviderDeferred_Expecter) Boot(app interface{}) *MockServiceProviderDeferred_Boot_Call {
	return &MockServiceProviderDeferred_Boot_Call{Call: _e.mock.On("Boot", app)}
}

func (_c *MockServiceProviderDeferred_Boot_Call) Run(run func(app di.Application)) *MockServiceProviderDeferred_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Application))
	})
	return _c
}

func (_c *MockServiceProviderDeferred_Boot_Call) Return() *MockServiceProviderDeferred_Boot_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceProviderDeferred_Boot_Call) RunAndReturn(run func(di.Application)) *MockServiceProviderDeferred_Boot_Call {
	_c.Run(run)
	return _c
}

// DeferredBoot provides a mock function with given fields: app
func (_m *MockServiceProviderDeferred) DeferredBoot(app di.Application) {
	_m.Called(app)
}

// MockServiceProviderDeferred_DeferredBoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeferredBoot'
type MockServiceProviderDeferred_DeferredBoot_Call struct {
	*mock.Call
}

// DeferredBoot is a helper method to define mock.On call
//   - app di.Application
func (_e *MockServiceProviderDeferred_Expecter) DeferredBoot(app interface{}) *MockServiceProviderDeferred_DeferredBoot_Call {
	return &MockServiceProviderDeferred_DeferredBoot_Call{Call: _e.mock.On("DeferredBoot", app)}
}

func (_c *MockServiceProviderDeferred_DeferredBoot_Call) Run(run func(app di.Application)) *MockServiceProviderDeferred_DeferredBoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Application))
	})
	return _c
}

func (_c *MockServiceProviderDeferred_DeferredBoot_Call) Return() *MockServiceProviderDeferred_DeferredBoot_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceProviderDeferred_DeferredBoot_Call) RunAndReturn(run func(di.Application)) *MockServiceProviderDeferred_DeferredBoot_Call {
	_c.Run(run)
	return _c
}

// Providers provides a mock function with no fields
func (_m *MockServiceProviderDeferred) Providers() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Providers")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockServiceProviderDeferred_Providers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Providers'
type MockServiceProviderDeferred_Providers_Call struct {
	*mock.Call
}

// Providers is a helper method to define mock.On call
func (_e *MockServiceProviderDeferred_Expecter) Providers() *MockServiceProviderDeferred_Providers_Call {
	return &MockServiceProviderDeferred_Providers_Call{Call: _e.mock.On("Providers")}
}

func (_c *MockServiceProviderDeferred_Providers_Call) Run(run func()) *MockServiceProviderDeferred_Providers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceProviderDeferred_Providers_Call) Return(_a0 []string) *MockServiceProviderDeferred_Providers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceProviderDeferred_Providers_Call) RunAndReturn(run func() []string) *MockServiceProviderDeferred_Providers_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: app
func (_m *MockServiceProviderDeferred) Register(app di.Application) {
	_m.Called(app)
}

// MockServiceProviderDeferred_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockServiceProviderDeferred_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - app di.Application
func (_e *MockServiceProviderDeferred_Expecter) Register(app interface{}) *MockServiceProviderDeferred_Register_Call {
	return &MockServiceProviderDeferred_Register_Call{Call: _e.mock.On("Register", app)}
}

func (_c *MockServiceProviderDeferred_Register_Call) Run(run func(app di.Application)) *MockServiceProviderDeferred_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Application))
	})
	return _c
}

func (_c *MockServiceProviderDeferred_Register_Call) Return() *MockServiceProviderDeferred_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceProviderDeferred_Register_Call) RunAndReturn(run func(di.Application)) *MockServiceProviderDeferred_Register_Call {
	_c.Run(run)
	return _c
}

// Requires provides a mock function with no fields
func (_m *MockServiceProviderDeferred) Requires() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Requires")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockServiceProviderDeferred_Requires_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Requires'
type MockServiceProviderDeferred_Requires_Call struct {
	*mock.Call
}

// Requires is a helper method to define mock.On call
func (_e *MockServiceProviderDeferred_Expecter) Requires() *MockServiceProviderDeferred_Requires_Call {
	return &MockServiceProviderDeferred_Requires_Call{Call: _e.mock.On("Requires")}
}

func (_c *MockServiceProviderDeferred_Requires_Call) Run(run func()) *MockServiceProviderDeferred_Requires_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceProviderDeferred_Requires_Call) Return(_a0 []string) *MockServiceProviderDeferred_Requires_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceProviderDeferred_Requires_Call) RunAndReturn(run func() []string) *MockServiceProviderDeferred_Requires_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceProviderDeferred creates a new instance of MockServiceProviderDeferred. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceProviderDeferred(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceProviderDeferred {
	mock := &MockServiceProviderDeferred{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
