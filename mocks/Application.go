// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	di "go.fork.vn/di"
)

// MockApplication is an autogenerated mock type for the Application type
type MockApplication struct {
	mock.Mock
}

type MockApplication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApplication) EXPECT() *MockApplication_Expecter {
	return &MockApplication_Expecter{mock: &_m.Mock}
}

// Alias provides a mock function with given fields: abstract, alias
func (_m *MockApplication) Alias(abstract string, alias string) {
	_m.Called(abstract, alias)
}

// MockApplication_Alias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alias'
type MockApplication_Alias_Call struct {
	*mock.Call
}

// Alias is a helper method to define mock.On call
//   - abstract string
//   - alias string
func (_e *MockApplication_Expecter) Alias(abstract interface{}, alias interface{}) *MockApplication_Alias_Call {
	return &MockApplication_Alias_Call{Call: _e.mock.On("Alias", abstract, alias)}
}

func (_c *MockApplication_Alias_Call) Run(run func(abstract string, alias string)) *MockApplication_Alias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockApplication_Alias_Call) Return() *MockApplication_Alias_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Alias_Call) RunAndReturn(run func(string, string)) *MockApplication_Alias_Call {
	_c.Run(run)
	return _c
}

// Bind provides a mock function with given fields: abstract, concrete
func (_m *MockApplication) Bind(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// MockApplication_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockApplication_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - abstract string
//   - concrete di.BindingFunc
func (_e *MockApplication_Expecter) Bind(abstract interface{}, concrete interface{}) *MockApplication_Bind_Call {
	return &MockApplication_Bind_Call{Call: _e.mock.On("Bind", abstract, concrete)}
}

func (_c *MockApplication_Bind_Call) Run(run func(abstract string, concrete di.BindingFunc)) *MockApplication_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(di.BindingFunc))
	})
	return _c
}

func (_c *MockApplication_Bind_Call) Return() *MockApplication_Bind_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Bind_Call) RunAndReturn(run func(string, di.BindingFunc)) *MockApplication_Bind_Call {
	_c.Run(run)
	return _c
}

// Boot provides a mock function with no fields
func (_m *MockApplication) Boot() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Boot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplication_Boot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Boot'
type MockApplication_Boot_Call struct {
	*mock.Call
}

// Boot is a helper method to define mock.On call
func (_e *MockApplication_Expecter) Boot() *MockApplication_Boot_Call {
	return &MockApplication_Boot_Call{Call: _e.mock.On("Boot")}
}

func (_c *MockApplication_Boot_Call) Run(run func()) *MockApplication_Boot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_Boot_Call) Return(_a0 error) *MockApplication_Boot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_Boot_Call) RunAndReturn(run func() error) *MockApplication_Boot_Call {
	_c.Call.Return(run)
	return _c
}

// BootServiceProviders provides a mock function with no fields
func (_m *MockApplication) BootServiceProviders() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BootServiceProviders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplication_BootServiceProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootServiceProviders'
type MockApplication_BootServiceProviders_Call struct {
	*mock.Call
}

// BootServiceProviders is a helper method to define mock.On call
func (_e *MockApplication_Expecter) BootServiceProviders() *MockApplication_BootServiceProviders_Call {
	return &MockApplication_BootServiceProviders_Call{Call: _e.mock.On("BootServiceProviders")}
}

func (_c *MockApplication_BootServiceProviders_Call) Run(run func()) *MockApplication_BootServiceProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_BootServiceProviders_Call) Return(_a0 error) *MockApplication_BootServiceProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_BootServiceProviders_Call) RunAndReturn(run func() error) *MockApplication_BootServiceProviders_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function with given fields: callback, additionalParams
func (_m *MockApplication) Call(callback interface{}, additionalParams ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, callback)
	_ca = append(_ca, additionalParams...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) ([]interface{}, error)); ok {
		return rf(callback, additionalParams...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) []interface{}); ok {
		r0 = rf(callback, additionalParams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...interface{}) error); ok {
		r1 = rf(callback, additionalParams...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockApplication_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockApplication_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - callback interface{}
//   - additionalParams ...interface{}
func (_e *MockApplication_Expecter) Call(callback interface{}, additionalParams ...interface{}) *MockApplication_Call_Call {
	return &MockApplication_Call_Call{Call: _e.mock.On("Call",
		append([]interface{}{callback}, additionalParams...)...)}
}

func (_c *MockApplication_Call_Call) Run(run func(callback interface{}, additionalParams ...interface{})) *MockApplication_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockApplication_Call_Call) Return(_a0 []interface{}, _a1 error) *MockApplication_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockApplication_Call_Call) RunAndReturn(run func(interface{}, ...interface{}) ([]interface{}, error)) *MockApplication_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Container provides a mock function with no fields
func (_m *MockApplication) Container() di.Container {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Container")
	}

	var r0 di.Container
	if rf, ok := ret.Get(0).(func() di.Container); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(di.Container)
		}
	}

	return r0
}

// MockApplication_Container_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Container'
type MockApplication_Container_Call struct {
	*mock.Call
}

// Container is a helper method to define mock.On call
func (_e *MockApplication_Expecter) Container() *MockApplication_Container_Call {
	return &MockApplication_Container_Call{Call: _e.mock.On("Container")}
}

func (_c *MockApplication_Container_Call) Run(run func()) *MockApplication_Container_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_Container_Call) Return(_a0 di.Container) *MockApplication_Container_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_Container_Call) RunAndReturn(run func() di.Container) *MockApplication_Container_Call {
	_c.Call.Return(run)
	return _c
}

// Instance provides a mock function with given fields: abstract, instance
func (_m *MockApplication) Instance(abstract string, instance interface{}) {
	_m.Called(abstract, instance)
}

// MockApplication_Instance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instance'
type MockApplication_Instance_Call struct {
	*mock.Call
}

// Instance is a helper method to define mock.On call
//   - abstract string
//   - instance interface{}
func (_e *MockApplication_Expecter) Instance(abstract interface{}, instance interface{}) *MockApplication_Instance_Call {
	return &MockApplication_Instance_Call{Call: _e.mock.On("Instance", abstract, instance)}
}

func (_c *MockApplication_Instance_Call) Run(run func(abstract string, instance interface{})) *MockApplication_Instance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockApplication_Instance_Call) Return() *MockApplication_Instance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Instance_Call) RunAndReturn(run func(string, interface{})) *MockApplication_Instance_Call {
	_c.Run(run)
	return _c
}

// Make provides a mock function with given fields: abstract
func (_m *MockApplication) Make(abstract string) (interface{}, error) {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(abstract)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(abstract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockApplication_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockApplication_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
//   - abstract string
func (_e *MockApplication_Expecter) Make(abstract interface{}) *MockApplication_Make_Call {
	return &MockApplication_Make_Call{Call: _e.mock.On("Make", abstract)}
}

func (_c *MockApplication_Make_Call) Run(run func(abstract string)) *MockApplication_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockApplication_Make_Call) Return(_a0 interface{}, _a1 error) *MockApplication_Make_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockApplication_Make_Call) RunAndReturn(run func(string) (interface{}, error)) *MockApplication_Make_Call {
	_c.Call.Return(run)
	return _c
}

// MustMake provides a mock function with given fields: abstract
func (_m *MockApplication) MustMake(abstract string) interface{} {
	ret := _m.Called(abstract)

	if len(ret) == 0 {
		panic("no return value specified for MustMake")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(abstract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockApplication_MustMake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustMake'
type MockApplication_MustMake_Call struct {
	*mock.Call
}

// MustMake is a helper method to define mock.On call
//   - abstract string
func (_e *MockApplication_Expecter) MustMake(abstract interface{}) *MockApplication_MustMake_Call {
	return &MockApplication_MustMake_Call{Call: _e.mock.On("MustMake", abstract)}
}

func (_c *MockApplication_MustMake_Call) Run(run func(abstract string)) *MockApplication_MustMake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockApplication_MustMake_Call) Return(_a0 interface{}) *MockApplication_MustMake_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_MustMake_Call) RunAndReturn(run func(string) interface{}) *MockApplication_MustMake_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: provider
func (_m *MockApplication) Register(provider di.ServiceProvider) {
	_m.Called(provider)
}

// MockApplication_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockApplication_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - provider di.ServiceProvider
func (_e *MockApplication_Expecter) Register(provider interface{}) *MockApplication_Register_Call {
	return &MockApplication_Register_Call{Call: _e.mock.On("Register", provider)}
}

func (_c *MockApplication_Register_Call) Run(run func(provider di.ServiceProvider)) *MockApplication_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.ServiceProvider))
	})
	return _c
}

func (_c *MockApplication_Register_Call) Return() *MockApplication_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Register_Call) RunAndReturn(run func(di.ServiceProvider)) *MockApplication_Register_Call {
	_c.Run(run)
	return _c
}

// RegisterServiceProviders provides a mock function with no fields
func (_m *MockApplication) RegisterServiceProviders() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegisterServiceProviders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplication_RegisterServiceProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterServiceProviders'
type MockApplication_RegisterServiceProviders_Call struct {
	*mock.Call
}

// RegisterServiceProviders is a helper method to define mock.On call
func (_e *MockApplication_Expecter) RegisterServiceProviders() *MockApplication_RegisterServiceProviders_Call {
	return &MockApplication_RegisterServiceProviders_Call{Call: _e.mock.On("RegisterServiceProviders")}
}

func (_c *MockApplication_RegisterServiceProviders_Call) Run(run func()) *MockApplication_RegisterServiceProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_RegisterServiceProviders_Call) Return(_a0 error) *MockApplication_RegisterServiceProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_RegisterServiceProviders_Call) RunAndReturn(run func() error) *MockApplication_RegisterServiceProviders_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterWithDependencies provides a mock function with no fields
func (_m *MockApplication) RegisterWithDependencies() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RegisterWithDependencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockApplication_RegisterWithDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWithDependencies'
type MockApplication_RegisterWithDependencies_Call struct {
	*mock.Call
}

// RegisterWithDependencies is a helper method to define mock.On call
func (_e *MockApplication_Expecter) RegisterWithDependencies() *MockApplication_RegisterWithDependencies_Call {
	return &MockApplication_RegisterWithDependencies_Call{Call: _e.mock.On("RegisterWithDependencies")}
}

func (_c *MockApplication_RegisterWithDependencies_Call) Run(run func()) *MockApplication_RegisterWithDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockApplication_RegisterWithDependencies_Call) Return(_a0 error) *MockApplication_RegisterWithDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApplication_RegisterWithDependencies_Call) RunAndReturn(run func() error) *MockApplication_RegisterWithDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// Singleton provides a mock function with given fields: abstract, concrete
func (_m *MockApplication) Singleton(abstract string, concrete di.BindingFunc) {
	_m.Called(abstract, concrete)
}

// MockApplication_Singleton_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Singleton'
type MockApplication_Singleton_Call struct {
	*mock.Call
}

// Singleton is a helper method to define mock.On call
//   - abstract string
//   - concrete di.BindingFunc
func (_e *MockApplication_Expecter) Singleton(abstract interface{}, concrete interface{}) *MockApplication_Singleton_Call {
	return &MockApplication_Singleton_Call{Call: _e.mock.On("Singleton", abstract, concrete)}
}

func (_c *MockApplication_Singleton_Call) Run(run func(abstract string, concrete di.BindingFunc)) *MockApplication_Singleton_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(di.BindingFunc))
	})
	return _c
}

func (_c *MockApplication_Singleton_Call) Return() *MockApplication_Singleton_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockApplication_Singleton_Call) RunAndReturn(run func(string, di.BindingFunc)) *MockApplication_Singleton_Call {
	_c.Run(run)
	return _c
}

// NewMockApplication creates a new instance of MockApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplication {
	mock := &MockApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
